import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Link, useLocation } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import UserProfile from './UserProfile';
import { FiHome, FiPieChart, FiBookOpen, FiZap, FiMenu, FiX, FiLogIn } from 'react-icons/fi';
import { IconType } from 'react-icons';

interface NavItem {
  name: string;
  path: string;
  icon: React.ReactElement<{ className?: string }>;
  iconType?: IconType;
}

const navigation: NavItem[] = [
  { name: 'Home', path: '/', icon: <FiHome />, iconType: FiHome },
  { name: 'Dashboard', path: '/dashboard', icon: <FiPieChart />, iconType: FiPieChart },
  { name: 'Analyze', path: '/analyze', icon: <FiZap />, iconType: FiZap },
  { name: 'Journal', path: '/journal', icon: <FiBookOpen />, iconType: FiBookOpen },
  { name: 'Insights', path: '/insights', icon: <FiPieChart />, iconType: FiPieChart }
];

const Navbar: React.FC = () => {
  const [scrolled, setScrolled] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const location = useLocation();
  const { user } = useAuth();

  useEffect(() => {
    const handleScroll = () => {
      const isScrolled = window.scrollY > 10;
      if (isScrolled !== scrolled) {
        setScrolled(isScrolled);
      }
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, [scrolled]);

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth > 768) {
        setIsMenuOpen(false);
      }
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    if (isMenuOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'auto';
    }
    
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, [isMenuOpen]);

  return (
    <>
      <motion.nav 
        className={`fixed w-full top-0 z-50 ${
          scrolled 
            ? 'bg-[#0D041B]/90 backdrop-blur-md border-b border-white/5' 
            : 'bg-[#0D041B]/80 backdrop-blur-sm border-b border-white/5'
        }`}
        initial={{ y: -100, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.5, type: 'spring', stiffness: 120 }}
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            {/* Logo */}
            <Link to="/" className="flex-shrink-0 flex items-center">
              <span className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-indigo-400 to-purple-500">
                OneirVision
              </span>
            </Link>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-1">
              {navigation.map((item) => {
                const isActive = location.pathname === item.path;
                return (
                  <Link
                    key={item.name}
                    to={item.path}
                    className={`relative px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 flex items-center space-x-2 ${
                      isActive 
                        ? 'text-white bg-white/10' 
                        : 'text-gray-300 hover:bg-white/5 hover:text-white'
                    }`}
                  >
                    {React.cloneElement(item.icon, {
                      className: `w-5 h-5 ${isActive ? 'text-indigo-400' : 'text-gray-400'}`
                    })}
                    <span>{item.name}</span>
                    {isActive && (
                      <motion.span 
                        layoutId="nav-dot"
                        className="absolute -bottom-1 left-1/2 w-1.5 h-1.5 bg-indigo-400 rounded-full -translate-x-1/2"
                        initial={false}
                        transition={{
                          type: 'spring',
                          stiffness: 500,
                          damping: 30
                        }}
                      />
                    )}
                  </Link>
                );
              })}
            </div>
            
            {/* Desktop User/Auth */}
            <div className="hidden md:flex items-center ml-4">
              {user ? (
                <UserProfile />
              ) : (
                <Link
                  to="/auth"
                  className="inline-flex items-center px-4 py-2 text-sm font-medium rounded-full text-white bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-500 hover:to-purple-500 transition-all shadow-md hover:shadow-indigo-500/20"
                >
                  <FiLogIn className="mr-2 h-4 w-4" />
                  Sign In
                </Link>
              )}
            </div>

            {/* Mobile menu button */}
            <div className="md:hidden flex items-center">
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="p-2 rounded-lg text-gray-300 hover:text-white hover:bg-white/10 transition-colors"
                aria-label="Toggle menu"
              >
                {isMenuOpen ? <FiX className="h-6 w-6" /> : <FiMenu className="h-6 w-6" />}
              </button>
            </div>
          </div>
        </div>
      </motion.nav>

      {/* Mobile Menu */}
      <AnimatePresence>
        {isMenuOpen && (
          <>
            {/* Overlay */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="fixed inset-0 bg-black/50 z-40 md:hidden"
              onClick={() => setIsMenuOpen(false)}
            />
            
            {/* Menu Panel */}
            <motion.div
              initial={{ x: '100%' }}
              animate={{ x: 0 }}
              exit={{ x: '100%' }}
              transition={{ type: 'tween', duration: 0.3, ease: [0.4, 0, 0.2, 1] }}
              className="fixed top-0 right-0 w-72 h-full bg-[#0D041B] border-l border-white/5 backdrop-blur-xl shadow-2xl z-50 flex flex-col overflow-y-auto"
            >
              {/* Menu Header */}
              <div className="p-4 border-b border-white/5 flex justify-between items-center">
                <span className="text-lg font-semibold text-white">Menu</span>
                <button
                  onClick={() => setIsMenuOpen(false)}
                  className="p-1.5 rounded-full hover:bg-white/10 text-gray-300 hover:text-white transition-colors"
                >
                  <FiX className="h-5 w-5" />
                </button>
              </div>
              
              {/* Navigation Items */}
              <nav className="flex-1 p-4 space-y-1">
                {navigation.map((item) => {
                  const isActive = location.pathname === item.path;
                  return (
                    <Link
                      key={item.name}
                      to={item.path}
                      onClick={() => setIsMenuOpen(false)}
                      className={`flex items-center px-4 py-3 text-base font-medium rounded-lg mx-1 ${
                        isActive
                          ? 'bg-white/10 text-white'
                          : 'text-gray-300 hover:bg-white/5 hover:text-white'
                      }`}
                    >
                      {React.cloneElement(item.icon, {
                        className: `mr-3 h-6 w-6 ${isActive ? 'text-indigo-400' : 'text-gray-400'}`
                      })}
                      {item.name}
                    </Link>
                  );
                })}
              </nav>
              
              {/* User Section */}
              <div className="p-4 border-t border-white/5">
                {user ? (
                  <div className="px-4 py-3 flex items-center">
                    <UserProfile />
                  </div>
                ) : (
                  <Link
                    to="/auth"
                    onClick={() => setIsMenuOpen(false)}
                    className="w-full flex items-center justify-center px-4 py-3 rounded-lg text-sm font-medium text-white bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-500 hover:to-purple-500 transition-all shadow-md"
                  >
                    <FiLogIn className="mr-2 h-5 w-5" />
                    Sign In
                  </Link>
                )}
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </>
  );
};

export default Navbar;
